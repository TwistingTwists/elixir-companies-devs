defmodule CompaniesRegEx.Resources.Recruiters do
  use Ash.Resource, data_layer: AshPostgres.DataLayer

  import AshGeo.Postgis
  alias CompaniesRegEx.Resources.JobDescription

  postgres do
    table "recruiters"
    repo CompaniesRegEx.Repo
  end

  code_interface do
    define_for CompaniesRegEx.Resources
    define :create
    define :create_with_jd
    # , args: [:job_description]
    define :update
    define :destroy

    # all read
    define :read_all, action: :read
    define :get_by_id, args: [:id], action: :by_id
    define :containing, args: [:location]
  end

  actions do
    defaults [:read, :update, :destroy]

    create :create do
      argument :location, :geo_any
      change set_attribute(:location, arg(:location))
      # change manage_relationship(:job_description, type: :direct_control)
    end

    create :create_with_jd do
      argument :location, :geo_any
      change set_attribute(:location, arg(:location))

      argument :job_description, {:array, :map}
      change manage_relationship(:job_description, type: :direct_control)
    end

    read :by_id do
      argument :id, :uuid, allow_nil?: false
      get? true
      prepare build(load: [:job_description])
      filter expr(id == ^arg(:id))
    end

    read :containing do
      argument :location, :geo_any do
        allow_nil? false
        constraints geo_types: :point
      end

      filter expr(^st_within(^arg(:location), location))
    end
  end

  attributes do
    # Add an autogenerated UUID primary key called `:id`.
    uuid_primary_key :id

    attribute :title, :string do
      allow_nil? false
    end

    attribute :introduction, :string

    # company name , website, HQ,
    attribute :about_us, :string

    attribute :recruitment_steps, :string

    # application links (external), emails, social media etc
    attribute :contact_us, :string

    attribute :location, AshGeo.Geometry
  end

  relationships do
    has_many :job_description, CompaniesRegEx.Resources.JobDescription
  end
end
